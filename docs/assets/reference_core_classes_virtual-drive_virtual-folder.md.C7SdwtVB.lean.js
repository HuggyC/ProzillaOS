import{_ as l,c as t,j as e,a as s,t as n,a3 as r,o}from"./chunks/framework.eHAlhh0g.js";const F=JSON.parse('{"title":"Class VirtualFolder extends VirtualBase","description":"A virtual folder that can contains files and sub-folders","frontmatter":{"outline":[1,3],"description":"A virtual folder that can contains files and sub-folders","package":"@prozilla-os/core","head":[["meta",{"name":"og:title","content":"Class VirtualFolder extends VirtualBase | ProzillaOS Docs"}],["meta",{"name":"twitter:title","content":"Class VirtualFolder extends VirtualBase | ProzillaOS Docs"}],["meta",{"name":"og:description","content":"A virtual folder that can contains files and sub-folders"}],["meta",{"name":"twitter:description","content":"A virtual folder that can contains files and sub-folders"}],["link",{"rel":"canonical","href":"https://os.prozilla.dev/docs/reference/core/classes/virtual-drive/virtual-folder"}],["meta",{"name":"og:url","content":"https://os.prozilla.dev/docs/reference/core/classes/virtual-drive/virtual-folder"}],["meta",{"name":"twitter:url","content":"https://os.prozilla.dev/docs/reference/core/classes/virtual-drive/virtual-folder"}],["meta",{"name":"og:locale","content":"en_US"}],["meta",{"name":"og:image","content":"https://os.prozilla.dev/docs/prozilla-os-title-banner.png"}],["meta",{"name":"twitter:image","content":"https://os.prozilla.dev/docs/prozilla-os-title-banner.png"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"twitter:card","content":"summary_large_image"}]]},"headers":[],"relativePath":"reference/core/classes/virtual-drive/virtual-folder.md","filePath":"reference/core/classes/virtual-drive/virtual-folder.md"}'),d={name:"reference/core/classes/virtual-drive/virtual-folder.md"};function h(a,i,u,c,p,g){return o(),t("div",null,[i[0]||(i[0]=e("h1",{id:"class-virtualfolder-extends-virtualbase",tabindex:"-1"},[s("Class "),e("a",{href:"https://github.com/prozilla-os/ProzillaOS/blob/main/packages/core/src/features/virtual-drive/folder/virtualFolder.ts",target:"_blank",rel:"noreferrer"},[e("code",null,"VirtualFolder")]),s(" extends "),e("a",{href:"./virtual-base"},[e("code",null,"VirtualBase")]),s(),e("a",{class:"header-anchor",href:"#class-virtualfolder-extends-virtualbase","aria-label":'Permalink to "Class [`VirtualFolder`](https://github.com/prozilla-os/ProzillaOS/blob/main/packages/core/src/features/virtual-drive/folder/virtualFolder.ts) extends [`VirtualBase`](./virtual-base)"'},"​")],-1)),e("p",null,n(a.$frontmatter.description),1),i[1]||(i[1]=r(`<h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><blockquote><p><code>new VirtualFolder(name, type)</code></p></blockquote><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><strong>name</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li><li><strong>type</strong><ul><li><strong>Type:</strong> <code>number | undefined</code></li></ul></li></ul><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="subfolders" tabindex="-1">subFolders <a class="header-anchor" href="#subfolders" aria-label="Permalink to &quot;subFolders&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>(VirtualFolder | VirtualFolderLink)[]</code></li></ul><h3 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>(VirtualFile | VirtualFileLink)[]</code></li></ul><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>number | undefined</code></li></ul><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="setalias-alias" tabindex="-1">setAlias(alias) <a class="header-anchor" href="#setalias-alias" aria-label="Permalink to &quot;setAlias(alias)&quot;">​</a></h3><ul><li><strong>Parameters</strong><ul><li><strong>alias</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="hasfile-name-extension" tabindex="-1">hasFile(name, extension) <a class="header-anchor" href="#hasfile-name-extension" aria-label="Permalink to &quot;hasFile(name, extension)&quot;">​</a></h3><p>Returns true if this folder contains a file matching a name and extension</p><ul><li><strong>Parameters</strong><ul><li><strong>name</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li><li><strong>extension</strong><ul><li><strong>Type:</strong> <code>string | undefined</code></li></ul></li></ul></li><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>boolean</code></li></ul></li></ul><h3 id="hasfolder-name" tabindex="-1">hasFolder(name) <a class="header-anchor" href="#hasfolder-name" aria-label="Permalink to &quot;hasFolder(name)&quot;">​</a></h3><p>Returns true if this folder contains a folder matching a name</p><ul><li><strong>Parameters</strong><ul><li><strong>name</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></li><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>boolean</code></li></ul></li></ul><h3 id="findfile-name-extension" tabindex="-1">findFile(name, extension) <a class="header-anchor" href="#findfile-name-extension" aria-label="Permalink to &quot;findFile(name, extension)&quot;">​</a></h3><p>Finds and returns a file inside this folder matching a name and extension</p><ul><li><strong>Parameters</strong><ul><li><strong>name</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li><li><strong>extension</strong><ul><li><strong>Type:</strong> <code>string | undefined</code></li></ul></li></ul></li><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>VirtualFile | VirtualFileLink | null</code></li></ul></li></ul><h3 id="findsubfolder-name" tabindex="-1">findSubFolder(name) <a class="header-anchor" href="#findsubfolder-name" aria-label="Permalink to &quot;findSubFolder(name)&quot;">​</a></h3><p>Finds and returns a folder inside this folder matching a name</p><ul><li><strong>Parameters</strong><ul><li><strong>name</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></li><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>VirtualFolder | VirtualFolderLink | null</code></li></ul></li></ul><h3 id="createfile-name-extension-callback" tabindex="-1">createFile(name, extension, callback) <a class="header-anchor" href="#createfile-name-extension-callback" aria-label="Permalink to &quot;createFile(name, extension, callback)&quot;">​</a></h3><p>Creates a file with a name and extension</p><ul><li><strong>Parameters</strong><ul><li><strong>name</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li><li><strong>extension</strong><ul><li><strong>Type:</strong> <code>string | undefined</code></li></ul></li><li><strong>callback</strong><ul><li><strong>Type:</strong> <code>((newFile: VirtualFile | VirtualFileLink) =&gt; void) | undefined</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="createfiles-files" tabindex="-1">createFiles(files) <a class="header-anchor" href="#createfiles-files" aria-label="Permalink to &quot;createFiles(files)&quot;">​</a></h3><p>Creates files based on an array of objects with file names and extensions</p><ul><li><strong>Parameters</strong><ul><li><strong>files</strong><ul><li><strong>Type:</strong> <code>{ name: string; extension: string; }[]</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="createfilelink-name-callback" tabindex="-1">createFileLink(name, callback) <a class="header-anchor" href="#createfilelink-name-callback" aria-label="Permalink to &quot;createFileLink(name, callback)&quot;">​</a></h3><p>Creates a file link with a name</p><ul><li><strong>Parameters</strong><ul><li><strong>name</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li><li><strong>callback</strong><ul><li><strong>Type:</strong> <code>((newFileLink: VirtualFileLink | VirtualFile) =&gt; void) | undefined</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="createfilelinks-files" tabindex="-1">createFileLinks(files) <a class="header-anchor" href="#createfilelinks-files" aria-label="Permalink to &quot;createFileLinks(files)&quot;">​</a></h3><p>Creates file links based on an array of objects with file names and extensions</p><ul><li><strong>Parameters</strong><ul><li><strong>files</strong><ul><li><strong>Type:</strong> <code>{ name: string; }[]</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="createfolder-name-callback" tabindex="-1">createFolder(name, callback) <a class="header-anchor" href="#createfolder-name-callback" aria-label="Permalink to &quot;createFolder(name, callback)&quot;">​</a></h3><p>Creates a folder with a name</p><ul><li><strong>Parameters</strong><ul><li><strong>name</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li><li><strong>callback</strong><ul><li><strong>Type:</strong> <code>((newFolder: VirtualFolder) =&gt; void) | undefined</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="createfolders-names" tabindex="-1">createFolders(names) <a class="header-anchor" href="#createfolders-names" aria-label="Permalink to &quot;createFolders(names)&quot;">​</a></h3><p>Creates folders based on an array of folder names</p><ul><li><strong>Parameters</strong><ul><li><strong>names</strong><ul><li><strong>Type:</strong> <code>string[]</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="createfolderlink-name-callback" tabindex="-1">createFolderLink(name, callback) <a class="header-anchor" href="#createfolderlink-name-callback" aria-label="Permalink to &quot;createFolderLink(name, callback)&quot;">​</a></h3><p>Creates a folder link with a name</p><ul><li><strong>Parameters</strong><ul><li><strong>name</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li><li><strong>callback</strong><ul><li><strong>Type:</strong> <code>((newFolderLink: VirtualFolderLink | VirtualFolder) =&gt; void) | undefined</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="createfolderlinks-names" tabindex="-1">createFolderLinks(names) <a class="header-anchor" href="#createfolderlinks-names" aria-label="Permalink to &quot;createFolderLinks(names)&quot;">​</a></h3><p>Creates folder links based on an array of folder names</p><ul><li><strong>Parameters</strong><ul><li><strong>names</strong><ul><li><strong>Type:</strong> <code>string[]</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="remove-child" tabindex="-1">remove(child) <a class="header-anchor" href="#remove-child" aria-label="Permalink to &quot;remove(child)&quot;">​</a></h3><p>Removes a file or folder from this folder</p><ul><li><strong>Parameters</strong><ul><li><strong>child</strong><ul><li><strong>Type:</strong> <code>VirtualFile | VirtualFileLink | VirtualFolder | VirtualFolderLink</code></li></ul></li></ul></li><li><strong>Returns:</strong> <code>this</code></li></ul><h3 id="navigate-relativepath" tabindex="-1">navigate(relativePath) <a class="header-anchor" href="#navigate-relativepath" aria-label="Permalink to &quot;navigate(relativePath)&quot;">​</a></h3><p>Returns the file or folder at a relative path or null if it doesn&#39;t exist. This works similary to the <code>cd</code> command in a Linux environment. By starting your relative path with <code>.</code>, <code>..</code> or <code>/</code> you can refer to the current folder, parent folder or root folder respectively. You may also use aliases to refer to folders with aliases (e.g.: <code>~</code> refers to the home directory). If the relative path doesn&#39;t resolve to an existing folder or file, the function will return <code>null</code>.</p><ul><li><strong>Parameters</strong><ul><li><strong>relativePath</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></li><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>VirtualFile | VirtualFolder | null</code></li></ul></li></ul><h3 id="delete" tabindex="-1">delete() <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete()&quot;">​</a></h3><p>Deletes this folder and all its files and sub-folders recursively</p><h3 id="open-windowsmanager" tabindex="-1">open(windowsManager) <a class="header-anchor" href="#open-windowsmanager" aria-label="Permalink to &quot;open(windowsManager)&quot;">​</a></h3><p>Opens this folder in file explorer</p><ul><li><strong>Parameters</strong><ul><li><strong>windowsManager</strong><ul><li><strong>Type:</strong> <code>WindowsManager</code></li></ul></li></ul></li></ul><h3 id="getfiles-showhidden" tabindex="-1">getFiles(showHidden) <a class="header-anchor" href="#getfiles-showhidden" aria-label="Permalink to &quot;getFiles(showHidden)&quot;">​</a></h3><p>Returns all files inside this folder</p><ul><li><strong>Parameters</strong><ul><li><strong>showHidden</strong> - Whether to include hidden files <ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul></li></ul></li><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>VirtualFile[]</code></li></ul></li></ul><h3 id="getsubfolders-showhidden" tabindex="-1">getSubFolders(showHidden) <a class="header-anchor" href="#getsubfolders-showhidden" aria-label="Permalink to &quot;getSubFolders(showHidden)&quot;">​</a></h3><p>Returns all sub-folders inside this folder</p><ul><li><strong>Parameters</strong><ul><li><strong>showHidden</strong> - Whether to include hidden folders <ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul></li></ul></li><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>VirtualFolder[]</code></li></ul></li></ul><h3 id="getitemcount-includehidden" tabindex="-1">getItemCount(includeHidden) <a class="header-anchor" href="#getitemcount-includehidden" aria-label="Permalink to &quot;getItemCount(includeHidden)&quot;">​</a></h3><p>Returns the amount of files and sub-folders inside this folder</p><ul><li><strong>Parameters</strong><ul><li><strong>includeHidden</strong> - Whether to include hidden files and folders in the count <ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul></li></ul></li><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>number</code></li></ul></li></ul><h3 id="isfolder" tabindex="-1">isFolder() <a class="header-anchor" href="#isfolder" aria-label="Permalink to &quot;isFolder()&quot;">​</a></h3><ul><li><strong>Returns:</strong> <code>true</code><ul><li><strong>Type:</strong> <code>boolean</code></li></ul></li></ul><h3 id="geticonurl" tabindex="-1">getIconUrl() <a class="header-anchor" href="#geticonurl" aria-label="Permalink to &quot;getIconUrl()&quot;">​</a></h3><ul><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul><h3 id="tojson" tabindex="-1">toJSON() <a class="header-anchor" href="#tojson" aria-label="Permalink to &quot;toJSON()&quot;">​</a></h3><ul><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>VirtualFolderJson | null</code></li></ul></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C792EA;--shiki-light:#9C3EDA;">interface</span><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;"> VirtualFolderJson</span><span style="--shiki-dark:#C792EA;--shiki-light:#9C3EDA;"> extends</span><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;"> VirtualBaseJson</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F07178;--shiki-light:#E53935;">	fls</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">?:</span><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;"> VirtualFileJson</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">[]</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span>
<span class="line"><span style="--shiki-dark:#F07178;--shiki-light:#E53935;">	fds</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">?:</span><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;"> VirtualFolderJson</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">[]</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span>
<span class="line"><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C792EA;--shiki-light:#9C3EDA;">interface</span><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;"> VirtualBaseJson</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;"> {</span></span>
<span class="line"><span style="--shiki-dark:#F07178;--shiki-light:#E53935;">	nam</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">:</span><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;"> string</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span>
<span class="line"><span style="--shiki-dark:#F07178;--shiki-light:#E53935;">	ico</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">?:</span><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;"> string</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span>
<span class="line"><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">}</span></span></code></pre></div><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C792EA;--shiki-light:#9C3EDA;">const</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;"> folder </span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">=</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;"> new</span><span style="--shiki-dark:#82AAFF;--shiki-light:#6182B8;"> VirtualFolder</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">(</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;">Example</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">)</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">folder</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">.</span><span style="--shiki-dark:#82AAFF;--shiki-light:#6182B8;">createFolder</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">(</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;">Documents</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">,</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;"> (</span><span style="--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;">documentsFolder</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">)</span><span style="--shiki-dark:#C792EA;--shiki-light:#9C3EDA;"> =&gt;</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;"> {</span></span>
<span class="line"><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">	documentsFolder</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">.</span><span style="--shiki-dark:#82AAFF;--shiki-light:#6182B8;">createFile</span><span style="--shiki-dark:#F07178;--shiki-light:#E53935;">(</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;">text</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">,</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;"> &quot;</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;">txt</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">,</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;"> (</span><span style="--shiki-dark:#EEFFFF;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;">file</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">)</span><span style="--shiki-dark:#C792EA;--shiki-light:#9C3EDA;"> =&gt;</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;"> {</span></span>
<span class="line"><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">		file</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">.</span><span style="--shiki-dark:#82AAFF;--shiki-light:#6182B8;">setContent</span><span style="--shiki-dark:#F07178;--shiki-light:#E53935;">(</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;">Hello world!</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#F07178;--shiki-light:#E53935;">)</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span>
<span class="line"><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">	}</span><span style="--shiki-dark:#F07178;--shiki-light:#E53935;">)</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span>
<span class="line"><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">}</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">)</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C792EA;--shiki-light:#9C3EDA;">const</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;"> textTxt</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">:</span><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;"> VirtualFile</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;"> =</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;"> folder</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">.</span><span style="--shiki-dark:#82AAFF;--shiki-light:#6182B8;">navigate</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">(</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;">./Documents/text.txt</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">&quot;</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">)</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span>
<span class="line"><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">console</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">.</span><span style="--shiki-dark:#82AAFF;--shiki-light:#6182B8;">log</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">(textTxt</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">.</span><span style="--shiki-dark:#EEFFFF;--shiki-light:#90A4AE;">content)</span><span style="--shiki-dark:#89DDFF;--shiki-light:#39ADB5;">;</span></span></code></pre></div><h3 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h3><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span>Hello world!</span></span></code></pre></div>`,81))])}const f=l(d,[["render",h]]);export{F as __pageData,f as default};
