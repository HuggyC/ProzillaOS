import{_ as r,c as o,j as t,a as i,t as l,a1 as a,o as n}from"./chunks/framework.S1oRGgk6.js";const k=JSON.parse('{"title":"Browser functions","description":"Functions related to the browser","frontmatter":{"outline":"deep","description":"Functions related to the browser","package":"@prozilla-os/core","head":[["meta",{"name":"og:title","content":"Browser functions | ProzillaOS Docs"}],["meta",{"name":"twitter:title","content":"Browser functions | ProzillaOS Docs"}],["meta",{"name":"og:description","content":"Functions related to the browser"}],["meta",{"name":"twitter:description","content":"Functions related to the browser"}],["link",{"rel":"canonical","href":"https://os.prozilla.dev/docs/reference/core/functions/browser"}],["meta",{"name":"og:url","content":"https://os.prozilla.dev/docs/reference/core/functions/browser"}],["meta",{"name":"twitter:url","content":"https://os.prozilla.dev/docs/reference/core/functions/browser"}],["meta",{"name":"og:locale","content":"en_US"}],["meta",{"name":"og:image","content":"https://os.prozilla.dev/docs/prozilla-os-title-banner.png"}],["meta",{"name":"twitter:image","content":"https://os.prozilla.dev/docs/prozilla-os-title-banner.png"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"twitter:card","content":"summary_large_image"}]]},"headers":[],"relativePath":"reference/core/functions/browser.md","filePath":"reference/core/functions/browser.md"}'),c={name:"reference/core/functions/browser.md"};function u(s,e,p,d,g,h){return n(),o("div",null,[e[0]||(e[0]=t("h1",{id:"browser-functions",tabindex:"-1"},[i("Browser functions "),t("a",{class:"header-anchor",href:"#browser-functions","aria-label":'Permalink to "Browser functions"'},"​")],-1)),t("p",null,l(s.$frontmatter.description),1),e[1]||(e[1]=a(`<ul><li><strong>Source:</strong> <a href="https://github.com/prozilla-os/ProzillaOS/blob/main/packages/core/src/features/_utils/browser.utils.ts" target="_blank" rel="noreferrer"><code>browser.utils.ts</code></a></li></ul><h2 id="closeviewport-requireconfirmation-name" tabindex="-1">closeViewport(requireConfirmation, name) <a class="header-anchor" href="#closeviewport-requireconfirmation-name" aria-label="Permalink to &quot;closeViewport(requireConfirmation, name)&quot;">​</a></h2><p>Simulate closing the viewport by opening a blank page</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>Parameters</strong><ul><li><strong>requireConfirmation</strong> - Whether to ask the user for confirmation before closing <ul><li><strong>Type:</strong> <code>boolean | undefined</code></li><li><strong>Default:</strong> <code>false</code></li></ul></li><li><strong>name</strong> - Name of the system <ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></li></ul></details><h2 id="reloadviewport" tabindex="-1">reloadViewport() <a class="header-anchor" href="#reloadviewport" aria-label="Permalink to &quot;reloadViewport()&quot;">​</a></h2><p>Reload the viewport</p><h2 id="isvalidurl-string" tabindex="-1">isValidUrl(string) <a class="header-anchor" href="#isvalidurl-string" aria-label="Permalink to &quot;isValidUrl(string)&quot;">​</a></h2><p>Validate a URL string</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>Parameters</strong><ul><li><strong>string</strong> - Input string <ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></li><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>boolean</code></li></ul></li></ul></details><h2 id="setviewporttitle-title" tabindex="-1">setViewportTitle(title) <a class="header-anchor" href="#setviewporttitle-title" aria-label="Permalink to &quot;setViewportTitle(title)&quot;">​</a></h2><p>Change the viewport title by changing meta tags and document title</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>Parameters</strong><ul><li><strong>title</strong> - Viewport title <ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></li></ul></details><h2 id="setviewporticon-url" tabindex="-1">setViewportIcon(url) <a class="header-anchor" href="#setviewporticon-url" aria-label="Permalink to &quot;setViewportIcon(url)&quot;">​</a></h2><p>Change the viewport icon by changing meta tags</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>Parameters</strong><ul><li><strong>url</strong> - URL of the viewport icon <ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></li></ul></details><h2 id="getviewportparams" tabindex="-1">getViewportParams() <a class="header-anchor" href="#getviewportparams" aria-label="Permalink to &quot;getViewportParams()&quot;">​</a></h2><p>Get the current viewport parameters/search queries</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>Returns</strong><ul><li><strong>Type:</strong> <code>Record&lt;string, string&gt;</code></li></ul></li></ul></details><h2 id="generateurl-options" tabindex="-1">generateUrl(options) <a class="header-anchor" href="#generateurl-options" aria-label="Permalink to &quot;generateUrl(options)&quot;">​</a></h2><p>Generate a system URL based on some options</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>Parameters</strong><ul><li><strong>options</strong><ul><li><strong>Type:</strong> <code>GenerateUrlOptions</code></li></ul></li></ul></li><li><strong>Returns</strong> - The generated URL <ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GenerateUrlOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> appId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> fullscreen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> standalone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><h2 id="openurl-url-target" tabindex="-1">openUrl(url, target) <a class="header-anchor" href="#openurl-url-target" aria-label="Permalink to &quot;openUrl(url, target)&quot;">​</a></h2><p>Open a URL in an optional target or the current window</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>Parameters</strong><ul><li><strong>url</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li><li><strong>target</strong><ul><li><strong>Optional</strong></li><li><strong>Type:</strong> <code>React.HTMLAttributeAnchorTarget</code></li></ul></li></ul></li></ul></details><h2 id="removeurlprotocol-url" tabindex="-1">removeUrlProtocol(url) <a class="header-anchor" href="#removeurlprotocol-url" aria-label="Permalink to &quot;removeUrlProtocol(url)&quot;">​</a></h2><p>Remove the protocol from a URL string</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>Parameters</strong><ul><li><strong>url</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></li><li><strong>Returns</strong> - URL without protocol <ul><li><strong>Type:</strong> <code>string</code></li></ul></li></ul></details><h2 id="copytoclipboard-string-onsuccess-onfail" tabindex="-1">copyToClipboard(string, onSuccess, onFail) <a class="header-anchor" href="#copytoclipboard-string-onsuccess-onfail" aria-label="Permalink to &quot;copyToClipboard(string, onSuccess, onFail)&quot;">​</a></h2><p>Copy text to the user&#39;s clipboard</p><details class="details custom-block"><summary>Details</summary><ul><li><strong>Parameters</strong><ul><li><strong>string</strong><ul><li><strong>Type:</strong> <code>string</code></li></ul></li><li><strong>onSuccess</strong><ul><li><strong>Type:</strong> <code>Function</code></li></ul></li><li><strong>onFail</strong><ul><li><strong>Type:</strong> <code>Function</code></li></ul></li></ul></li></ul></details>`,30))])}const b=r(c,[["render",u]]);export{k as __pageData,b as default};
