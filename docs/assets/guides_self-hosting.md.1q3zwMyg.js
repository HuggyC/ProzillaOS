import{_ as t,c as i,a3 as a,o as s}from"./chunks/framework.eHAlhh0g.js";const g=JSON.parse('{"title":"Self-hosting ProzillaOS","description":"Learn how to host ProzillaOS locally on your own device","frontmatter":{"outline":"deep","description":"Learn how to host ProzillaOS locally on your own device","image":"https://os.prozilla.dev/docs/thumbnails/self-hosting-guide-thumbnail.png","head":[["meta",{"name":"og:title","content":"Self-hosting ProzillaOS | ProzillaOS Docs"}],["meta",{"name":"twitter:title","content":"Self-hosting ProzillaOS | ProzillaOS Docs"}],["meta",{"name":"og:description","content":"Learn how to host ProzillaOS locally on your own device"}],["meta",{"name":"twitter:description","content":"Learn how to host ProzillaOS locally on your own device"}],["link",{"rel":"canonical","href":"https://os.prozilla.dev/docs/guides/self-hosting"}],["meta",{"name":"og:url","content":"https://os.prozilla.dev/docs/guides/self-hosting"}],["meta",{"name":"twitter:url","content":"https://os.prozilla.dev/docs/guides/self-hosting"}],["meta",{"name":"og:locale","content":"en_US"}],["meta",{"name":"og:image","content":"https://os.prozilla.dev/docs/thumbnails/self-hosting-guide-thumbnail.png"}],["meta",{"name":"twitter:image","content":"https://os.prozilla.dev/docs/thumbnails/self-hosting-guide-thumbnail.png"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"twitter:card","content":"summary_large_image"}]]},"headers":[],"relativePath":"guides/self-hosting.md","filePath":"guides/self-hosting.md"}'),l={name:"guides/self-hosting.md"};function n(o,e,r,h,p,d){return s(),i("div",null,e[0]||(e[0]=[a(`<h1 id="self-hosting-prozillaos" tabindex="-1">Self-hosting ProzillaOS <a class="header-anchor" href="#self-hosting-prozillaos" aria-label="Permalink to &quot;Self-hosting ProzillaOS&quot;">​</a></h1><p>This guide explains how to host ProzillaOS locally on your own device or on your own server.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>Make sure you have <a href="https://nodejs.org/en" target="_blank" rel="noreferrer">NodeJS</a> (version v18.12 or higher) installed on your device.</p><ol><li><p>Clone the GitHub repository.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">git</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> clone</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> https://github.com/prozilla-os/ProzillaOS.git</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> ProzillaOS</span></span>
<span class="line"><span style="--shiki-dark:#82AAFF;--shiki-light:#6182B8;">cd</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> ProzillaOS</span></span></code></pre></div></li><li><p>Install package manager and dependencies</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">npm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> install</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> -g</span></span>
<span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> install</span></span></code></pre></div></li><li><p>Build packages and run project</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> packages:build</span></span>
<span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> start</span></span></code></pre></div></li><li><p>Test local dev server by visiting <a href="http://localhost:3000/" target="_blank" rel="noreferrer">localhost:3000</a></p></li></ol><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-label="Permalink to &quot;Development&quot;">​</a></h2><p>Once you have completed the installation process, you can use any of the following scripts to develop ProzillaOS:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#546E7A;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;"># Build packages using Vite lib mode</span></span>
<span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> packages:build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#546E7A;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;"># Start the Vite development server of the demo website</span></span>
<span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> demo:start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#546E7A;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;"># Start the VitePress development server of the docs website</span></span>
<span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> docs:start</span></span></code></pre></div><h2 id="deploying-website" tabindex="-1">Deploying website <a class="header-anchor" href="#deploying-website" aria-label="Permalink to &quot;Deploying website&quot;">​</a></h2><p>Before deploying the website, you will need to update <code>demo/src/config/deploy.config.ts</code> with the appropriate configuration. Remember to make sure your domain settings and output/build directory, in whatever tool you choose to use, matches the configurations in <code>deploy.config.ts</code>. Otherwise, deployment might fail or your website will not be indexable by search engines. Most tools will only allow you to adjust these settings after your intitial setup (and first deployment).</p><h3 id="deploying-to-github-pages" tabindex="-1">Deploying to GitHub Pages <a class="header-anchor" href="#deploying-to-github-pages" aria-label="Permalink to &quot;Deploying to GitHub Pages&quot;">​</a></h3><p>On your GitHub repository, go to <strong>Settings &gt; Pages</strong>. Adjust your settings, if necessary, to match your configuration in <code>deploy.config.ts</code>. Set <strong>Source</strong> to <strong>Deploy from a branch</strong> and set the branch to <strong>gh-pages</strong>.</p><p>Once your <a href="#installation">installation</a> and configurations are complete and you have verified that the site works in a development environment, run the following commands in the given order:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> build</span><span style="--shiki-dark:#546E7A;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;"> # Builds all packages and websites</span></span>
<span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> deploy</span><span style="--shiki-dark:#546E7A;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;"> # Stages the websites and deploys them to GitHub Pages</span></span></code></pre></div><p>The Vite config for the website includes a plugin that will automatically generate a sitemap, robots.txt file, cname file and other metadata to facilitate deployment and improve SEO. More information about this step can be found <a href="./../reference/dev-tools/functions/vite#stagesiteplugin-options">here</a>.</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>To make sure each website works correctly after building them and before deploying them, you may use the <code>pnpm run demo:preview</code> and <code>pnpm run docs:preview</code> scripts.</p></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>The <code>pnpm run build</code> script runs the build script for each and every package in the entire project. If you only want to build the packages, demo website or documentation website, use <code>pnpm run packages:build</code>, <code>pnpm run demo:build</code> and <code>pnpm run docs:build</code> respectively. In the deployment process described above, you may substitute <code>pnpm run build</code> with any of these scripts. Make sure you have already built the packages once before building the demo or documentation website or the build will fail.</p></div><h3 id="deploying-to-vercel" tabindex="-1">Deploying to Vercel <a class="header-anchor" href="#deploying-to-vercel" aria-label="Permalink to &quot;Deploying to Vercel&quot;">​</a></h3><p>Create a new Vercel project and import your GitHub repository. Then configure your project with the values below:</p><table tabindex="0"><thead><tr><th style="text-align:right;">Option</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:right;">Build command:</td><td style="text-align:left;">pnpm run build</td></tr><tr><td style="text-align:right;">Output directory:</td><td style="text-align:left;">demo/dist</td></tr><tr><td style="text-align:right;">Install command:</td><td style="text-align:left;">pnpm install</td></tr><tr><td style="text-align:right;">Development command:</td><td style="text-align:left;">pnpm run start</td></tr></tbody></table><h3 id="deploying-to-cloudflare-pages" tabindex="-1">Deploying to Cloudflare Pages <a class="header-anchor" href="#deploying-to-cloudflare-pages" aria-label="Permalink to &quot;Deploying to Cloudflare Pages&quot;">​</a></h3><p>Create a new Cloudflare Pages application and import your GitHub repository. Then configure your build settings with the values below:</p><table tabindex="0"><thead><tr><th style="text-align:right;">Option</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:right;">Build command:</td><td style="text-align:left;">pnpm run build</td></tr><tr><td style="text-align:right;">Output directory:</td><td style="text-align:left;">demo/dist</td></tr></tbody></table><h2 id="releasing-packages" tabindex="-1">Releasing packages <a class="header-anchor" href="#releasing-packages" aria-label="Permalink to &quot;Releasing packages&quot;">​</a></h2><p>To create a new release, run the following commands in the given order:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> packages:build</span><span style="--shiki-dark:#546E7A;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;"> # Builds all packages</span></span>
<span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> packages:update</span><span style="--shiki-dark:#546E7A;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;"> # Creates a new changelog entry</span></span>
<span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> packages:release</span><span style="--shiki-dark:#546E7A;--shiki-dark-font-style:italic;--shiki-light:#90A4AE;--shiki-light-font-style:italic;"> # Releases the latest version of each package along with their changelogs</span></span></code></pre></div><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="module-not-found" tabindex="-1">Module not found <a class="header-anchor" href="#module-not-found" aria-label="Permalink to &quot;Module not found&quot;">​</a></h3><p>In a local environment, ProzillaOS packages will try to import uncompiled versions of other ProzillaOS packages from their respective <code>src</code> directory. If this does not happen correctly and a package tries to import a compiled version of another package from its respective <code>dist</code> directory, you might run into an error message saying <code>module not found</code>. Executing the command <code>pnpm run packages:build</code> will compile each package into their <code>dist</code> directories and resolve this error.</p><h3 id="only-urls-with-a-scheme-in-file-data-and-node-are-supported-by-the-default-esm-loader" tabindex="-1">&quot;Only URLs with a scheme in: file, data, and node are supported by the default ESM loader.&quot; <a class="header-anchor" href="#only-urls-with-a-scheme-in-file-data-and-node-are-supported-by-the-default-esm-loader" aria-label="Permalink to &quot;&quot;Only URLs with a scheme in: file, data, and node are supported by the default ESM loader.&quot;&quot;">​</a></h3><p>This error may be caused by faulty installations of dependencies and can be fixed by running in the following commands in that case:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme material-theme-lighter vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> install</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> --fix-lockfile</span></span>
<span class="line"><span style="--shiki-dark:#FFCB6B;--shiki-light:#E2931D;">pnpm</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> run</span><span style="--shiki-dark:#C3E88D;--shiki-light:#91B859;"> build</span></span></code></pre></div><h2 id="support" tabindex="-1">Support <a class="header-anchor" href="#support" aria-label="Permalink to &quot;Support&quot;">​</a></h2><p>Feel free to reach out in our <a href="https://discord.gg/JwbyQP4tdz" target="_blank" rel="noreferrer">Discord server</a> if you need help with ProzillaOS.</p>`,34)]))}const k=t(l,[["render",n]]);export{g as __pageData,k as default};
